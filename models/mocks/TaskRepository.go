// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	"github.com/google/uuid"
	"github.com/onattech/invest/models"
	mock "github.com/stretchr/testify/mock"
)

// TaskStore is an autogenerated mock type for the TaskStore type
type TaskStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, task
func (_m *TaskStore) Create(c context.Context, task *models.Task) error {
	ret := _m.Called(c, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) error); ok {
		r0 = rf(c, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByUserID provides a mock function with given fields: c, userID
func (_m *TaskStore) FetchByUserID(c context.Context, userID uuid.UUID) ([]models.Task, error) {
	ret := _m.Called(c, userID)

	var r0 []models.Task
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Task); ok {
		r0 = rf(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(c, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskStore creates a new instance of TaskStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskStore(t mockConstructorTestingTNewTaskStore) *TaskStore {
	mock := &TaskStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
